// Generated by CoffeeScript 1.3.3
(function() {
  var $d, $w, converter, game, lookupOb, w,
    __slice = [].slice;

  w = window;

  $w = $(w);

  $d = $(document);

  lookupOb = function(ob, arr) {
    var item, result, _i, _len;
    result = ob;
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      item = arr[_i];
      result = result[item];
      if (result === void 0) {
        return void 0;
      }
    }
    return result;
  };

  $.on = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return $d.on.apply($d, args);
  };

  game = {
    title: 'Dark Passenger',
    $game: $('#game'),
    $title: $('#title'),
    $content: $('#content'),
    $links: $('#links'),
    locations: {},
    init: function() {
      cache.links = cache.links || {};
      this.bindEvents();
      this.locations = window.loc;
      return this.start();
    },
    bindEvents: function() {
      var _this = this;
      $w.bind('cmd', function(e, c) {
        return $.scrollTo(_this.renderCmd(c));
      });
      return $.on('click', 'a', function(e) {
        var $t, hash;
        hash = this.hash;
        if (this.hash) {
          $t = $(hash);
          if ($t.length) {
            $('.passage').removeClass('on');
            $.scrollTo($t.addClass('on', {
              onAfter: function() {
                return location.hash = hash;
              }
            }));
          } else {
            cmd(this.hash.slice(1));
          }
        }
        return e.preventDefault();
      });
    },
    renderCmd: function(c) {
      var data, lookupArray, newContent;
      $('.passage').removeClass('on');
      $('a').each(function() {
        if (this.hash === '#' + c) {
          return $(this).addClass('clicked');
        }
      });
      lookupArray = c.split('_');
      data = lookupOb(this.locations, lookupArray);
      newContent = $('<div class="passage on" id="' + c + '">' + this.parseContent(data.content) + '</div>');
      if (data.className) {
        newContent.addClass(data.className);
      }
      this.$content.append(newContent);
      return newContent;
    },
    render: function(cmds) {
      var c, _i, _len, _results;
      if (!$.isArray(cmds)) {
        cmds = [cmds];
      }
      _results = [];
      for (_i = 0, _len = cmds.length; _i < _len; _i++) {
        c = cmds[_i];
        _results.push(this.renderCmd(c));
      }
      return _results;
    },
    newGame: function() {
      cache.clear();
      return this.render('intro');
    },
    start: function() {
      var cmds;
      cmds = getCmds();
      if (cmds.length) {
        return this.render(cmds);
      } else {
        return cmd('intro');
      }
    },
    parseContent: function(txt) {
      txt = tmpl(txt)(this);
      return converter.makeHtml(txt);
    }
  };

  window.cache = localStorage;

  w.cmd = function(cmd) {
    var ar;
    $w.trigger('cmd', cmd);
    ar = getCmds();
    ar.push(cmd);
    set('cmd', ar);
    return ar;
  };

  w.getCmds = function() {
    return (get('cmd')) || [];
  };

  w.set = function(key, val) {
    val = JSON.stringify(val);
    try {
      return window.cache[key] = val;
    } catch (e) {
      return alert(e);
    }
  };

  w.get = function(key) {
    var val;
    val = window.cache[key];
    if (val) {
      return JSON.parse(val);
    } else {
      return void 0;
    }
  };

  $.scrollTo = function(selector, settings) {
    var pos;
    settings = $.extend({
      offset: {
        top: 0
      },
      onAfter: $.noop,
      duration: 400
    }, settings);
    pos = $(selector).offset();
    return $('html,body').animate({
      scrollTop: pos.top + settings.offset.top
    }, settings.speed, settings.easing, function() {
      return settings.onAfter();
    });
  };

  converter = new Showdown.converter();

  $(function() {
    return game.init();
  });

}).call(this);
