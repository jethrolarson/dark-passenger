// Generated by CoffeeScript 1.3.3
(function() {
  var $d, $w, converter, game, lookupOb, w,
    __slice = [].slice;

  w = window;

  $w = $(w);

  $d = $(document);

  lookupOb = function(ob, arr) {
    var item, result, _i, _len;
    result = ob;
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      item = arr[_i];
      result = result[item];
      if (result === void 0) {
        return void 0;
      }
    }
    return result;
  };

  $.on = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return $d.on.apply($d, args);
  };

  game = {
    title: 'Dark Passenger',
    $game: $('#game'),
    $content: $('#content'),
    $links: $('#links'),
    locations: {},
    init: function() {
      cache.links = cache.links || {};
      this.bindEvents();
      this.locations = window.loc;
      this.render();
      return $.scrollTo($('.passage').last(), {
        duration: 0
      });
    },
    bindEvents: function() {
      var self;
      self = this;
      return $.on('click', 'a', function(e) {
        var $t, ar, hash;
        hash = this.hash;
        if (this.hash) {
          $t = $(hash);
          if ($t.length) {
            $('.passage').removeClass('on');
            $t.addClass('on');
            $.scrollTo($t).done(function() {
              return location.hash = hash;
            });
          } else {
            ar = getCmds();
            ar.push(this.hash.slice(1));
            set('cmd', ar);
            self.render();
            $.scrollTo($('.passage').last());
          }
        }
        return e.preventDefault();
      });
    },
    renderCmd: function(c) {
      var data, lookupArray;
      $('.passage').removeClass('on');
      lookupArray = c.split('_');
      data = lookupOb(this.locations, lookupArray);
      return "<div class=\"passage " + (data.className ? data.className : '') + "\" id=\"" + c + "\">" + (this.parseContent(data.content)) + "</div>";
    },
    render: function(cmds) {
      var c, content, _i, _len,
        _this = this;
      cmds = getCmds();
      content = '';
      if (!$.isArray(cmds) || cmds.length === 0) {
        cmds = set('cmd', ['intro']);
      }
      for (_i = 0, _len = cmds.length; _i < _len; _i++) {
        c = cmds[_i];
        content += this.renderCmd(c);
      }
      content = $(content);
      $('a', content).each(function(i, el) {
        var v, _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = cmds.length; _j < _len1; _j++) {
          v = cmds[_j];
          if (el.hash === '#' + v) {
            $(el).addClass('clicked');
            break;
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
      return this.$content.html(content);
    },
    parseContent: function(txt) {
      txt = tmpl(txt)(this);
      return converter.makeHtml(txt);
    }
  };

  window.cache = localStorage;

  w.getCmds = function() {
    return w.get('cmd') || [];
  };

  w.set = function(key, val) {
    val = JSON.stringify(val);
    try {
      window.cache[key] = val;
    } catch (e) {
      alert(e);
      return void 0;
    }
    return val;
  };

  w.get = function(key) {
    var val;
    val = window.cache[key];
    if (val) {
      return JSON.parse(val);
    } else {
      return void 0;
    }
  };

  $.scrollTo = function(selector, settings) {
    var dfd, pos;
    settings = $.extend({
      offset: {
        top: 0
      },
      duration: 400
    }, settings);
    dfd = $.Deferred();
    pos = $(selector).offset();
    $('html,body').animate({
      scrollTop: pos.top + settings.offset.top
    }, settings.speed, settings.easing, function() {
      return dfd.resolve();
    });
    return dfd;
  };

  converter = new Showdown.converter();

  $(function() {
    return game.init();
  });

}).call(this);
